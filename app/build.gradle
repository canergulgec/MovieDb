plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
}

android {
    compileSdkVersion rootProject.compileSdk
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.android.moviedb"
        minSdkVersion rootProject.minSdk
        targetSdkVersion rootProject.targetSdk
        multiDexEnabled true
        versionCode 1
        versionName "1.0"
        vectorDrawables.useSupportLibrary = true
       // testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunner "com.android.test.utils.HiltTestRunner"

        def secureProps = new Properties()
        if (file("../secure.properties").exists()) {
            file("../secure.properties")?.withInputStream { secureProps.load(it) }
        }

        buildConfigField("Integer", "TIMEOUT", "60")
        buildConfigField("String", "BASE_URL", "\"https://api.themoviedb.org/3/\"")
        buildConfigField("String", "API_KEY", (secureProps.getProperty("MOVIE_API_KEY") ?: ""))
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            minifyEnabled false
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11.toString()
    }

    // Open data binding
    buildFeatures {
        dataBinding true
        viewBinding true
    }
}

kapt {
    correctErrorTypes true
}

dependencies {
    implementation project(":base")
    implementation project(":common")
    implementation project(":data")
    implementation project(":domain")
    implementation project(":presentation")

    implementation "androidx.appcompat:appcompat:$appcompat"
    implementation "androidx.core:core-ktx:$core_ktx"
    implementation "androidx.constraintlayout:constraintlayout:$constraintlayout"

    // Lifecycle
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
    implementation "androidx.fragment:fragment-ktx:$fragment_ktx"

    // Material design
    implementation "com.google.android.material:material:$materialDesign"

    // Multi Dex
    implementation "com.android.support:multidex:$multiDex"

    //Vector Drawable
    implementation "androidx.vectordrawable:vectordrawable:${vectorDrawable}"

    // Hilt dependencies
    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-compiler:$hilt_version"

    // Service Manager
    implementation "com.squareup.retrofit2:retrofit:${retrofit}"
    implementation "com.squareup.retrofit2:converter-gson:${gsonConverter}"
    implementation "com.squareup.okhttp3:okhttp:${okhttp}"
    implementation "com.squareup.okhttp3:logging-interceptor:${okhttp}"

    // Material Dialog
    implementation "com.afollestad.material-dialogs:core:$materialDialog"

    // Navigation Component
    implementation "androidx.navigation:navigation-fragment-ktx:$navComponentVersion"
    implementation "androidx.navigation:navigation-ui-ktx:$navComponentVersion"

    // Timber
    implementation "com.jakewharton.timber:timber:$timber"

    // Paging 3
    implementation "androidx.paging:paging-runtime-ktx:$paging_version"

    // Stetho
    implementation "com.facebook.stetho:stetho:$stethoVersion"
    implementation "com.facebook.stetho:stetho-okhttp3:$stethoVersion"

    // FlexBox
    implementation "com.google.android.flexbox:flexbox:$flexBox"

    // Hilt WorkManager
    implementation "androidx.hilt:hilt-work:$hilt_workmanager"
    kapt "androidx.hilt:hilt-compiler:$hilt_workmanager"

    // Preferences DataStore
    implementation "androidx.datastore:datastore-preferences:$dataStore"

    // UI Test
    androidTestImplementation "androidx.test:core-ktx:$test_core"
    androidTestImplementation "androidx.test.ext:junit-ktx:$test_ext"
    androidTestImplementation "androidx.test:rules:$test_rules"
    androidTestImplementation "androidx.test:runner:$test_runner"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$espresso"

    // Kakao
    androidTestImplementation "com.agoda.kakao:kakao:$kakao"

    // Navigation Test
    androidTestImplementation "androidx.navigation:navigation-testing:$navComponentVersion"
    // Truth
    androidTestImplementation "com.google.truth:truth:$truth"

    // WorkManager Test
    androidTestImplementation "androidx.work:work-testing:$workerTesting"

    // MockServer
    androidTestImplementation "com.squareup.okhttp3:mockwebserver:$mockServer"

    // OkHttp Idling Resource
    androidTestImplementation "com.jakewharton.espresso:okhttp3-idling-resource:$idling"

    // Hilt testing dependencies
    androidTestImplementation "com.google.dagger:hilt-android-testing:$hilt_version"
    kaptAndroidTest "com.google.dagger:hilt-compiler:$hilt_version"

    debugImplementation "androidx.fragment:fragment-testing:$fragmentTesting" // Create debug source set
    //

    // Unit Test
    testImplementation "junit:junit:$junit"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_test"
    testImplementation "androidx.arch.core:core-testing:$arch"
    testImplementation "app.cash.turbine:turbine:$turbine"
    testImplementation "io.mockk:mockk:$mockk"
    //

    // Flipper
    debugImplementation 'com.facebook.flipper:flipper:0.80.0'
    debugImplementation 'com.facebook.soloader:soloader:0.10.1'
    debugImplementation 'com.facebook.flipper:flipper-network-plugin:0.80.0'

    // App Startup
    implementation "androidx.startup:startup-runtime:$startup"
}

apply from: "$rootDir/spotless.gradle"
